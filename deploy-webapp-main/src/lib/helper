#! /bin/bash

set -e

source src/lib/logging

# Function to handle errors and print line number
handle_error() {
    echo "Error on line $1"
    exit 1
}

trap 'handle_error $LINENO' ERR

# Function to fetch secrets from the encrypted file
# Decrypt the file using sops key stored in Azure keyvault
# and export to environment variable
fetch_secrets() {
    SECRETS_FILE=$1
    FS=$'\37'
    sops -d $SECRETS_FILE | while read line
    do
        if [ ${line:0:1} == "#" ]; then
            continue
        fi
        key=$(echo $line | awk '{print $1}' | tr -d ':')
        value=$(echo $line | sed 's/\"/\\"/g' | awk '{$1="";print}' | xargs echo -n)
        # trim leading and trailing " in any property
        value="${value#\"}"
        value="${value%\"}"
        export ${key}=${value}
    done
}

# Function to replace placeholder variables in application variables 
# with their corresponding Environment specific value
# Sensitive variables are kept in encrypted file in repository
# and are decrypted at runtime
# <TEMP_VARIABLE> -- This comes in application properties file build artifacts 
# and is replaced with its environment specific value
replace_secrets() {
    BUILD="$LOCAL_ARTIFACT_DIR"
    FS=$'\37' # Using escape characters for sed delimiter

    sops -d $SECRETS_FILE | while read line
    do
        if [ ${line:0:1} == "#" ]; then
            continue
        fi
        key=$(echo $line | awk '{print $1}' | tr -d ':')
        value=$(echo $line | sed 's/\"/\\"/g' | awk '{$1="";print}' | xargs echo -n)
        # Below lines trims leading and trailing " in any property
        value="${value#\"}"
        value="${value%\"}"

        # Define application properties file here for
        find $SCRIPTS_ROOT_DIR -type f -name "*.*" -exec sed -i s${FS}"<${key}>"${FS}${value}${FS}g {} +

    done
}

# Function to replace placeholder variables in application variables 
# with their corresponding Environment specific value
replace_properties() {
    BUILD="$LOCAL_ARTIFACT_DIR"
    FS=$'\37' # Using escape characters for sed delimiter
    for line in $(cat  $PROPERTIES_FILE)
    do
        if [ ${line:0:1} == "#" ]; then
            continue
        fi
        IFS== read -r key value <<< "$line"
        if [ "$key" == "*URL" ]; then
            value=${value//['\']/'\\\'}
        fi

        # Define application properties file here for
        find $SCRIPTS_ROOT_DIR -type f -name "*.*" -exec sed -i s${FS}"<${key}>"${FS}${value}${FS}g {} +

    done
}

# Function to delete a local file and handle failure
delete_file() {
    rm -f $1
    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed in deleting file $1"
    fi
}

# Function to download artifact using wget
# Downloads webservice and ui packages from build artifacts url
download_artifact() {
    # check if local artifactory path exists
    if [ ! -d "$LOCAL_ARTIFACT_DIR" ]; then
        mkdir -p "$LOCAL_ARTIFACT_DIR"
        if [ $? -ne 0 ]; then
            logger "ERROR" "Failed to create local artifact directory"
            exit 1
        fi
    fi

    local webservice_package="${ARTIFACT_URL}/${SPRING_APP_PACKAGE_NAME}"
    local ui_package="${ARTIFACT_URL}/${WEBAPP_PACKAGE_NAME}"

    if [ ! -f "$LOCAL_ARTIFACT_DIR/$SPRING_APP_PACKAGE_NAME" ]; then
        logger "INFO" "Downloading webservice package from URL: $webservice_package"
        
        wget -O "$LOCAL_ARTIFACT_DIR/$SPRING_APP_PACKAGE_NAME" $webservice_package

        if [ $? -ne 0 ]; then
            logger "ERROR" "Failed to download webservice artifact from URL"
            exit 1
        fi

        logger "INFO" "Webservice artifact downloaded successfully to $LOCAL_ARTIFACT_DIR/$SPRING_APP_PACKAGE_NAME"
    fi

    if [ ! -f "$LOCAL_ARTIFACT_DIR/$WEBAPP_PACKAGE_NAME" ]; then
        logger "INFO" "Downloading webservice package from URL: $ui_package"
        
        wget -O "$LOCAL_ARTIFACT_DIR/$WEBAPP_PACKAGE_NAME" $ui_package

        if [ $? -ne 0 ]; then
            logger "ERROR" "Failed to download ui artifact from URL"
            exit 1
        fi

        logger "INFO" "UI artifact downloaded successfully to $LOCAL_ARTIFACT_PATH"

    else
        logger "INFO" "UI artifact already downloaded: $LOCAL_ARTIFACT_DIR/$WEBAPP_PACKAGE_NAME"
    fi
}
