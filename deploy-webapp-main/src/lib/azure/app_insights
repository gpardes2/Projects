#! /bin/bash

set -e

# check and create app insights
check_and_create_app_insights() {
    # Check if the Application Insights instance exists
    logger "INFO" "Checking if Application Insights instance '$APP_INSIGHTS_NAME' exists in resource group '$RESOURCE_GROUP'..."
    if az monitor app-insights component show --resource-group "$RESOURCE_GROUP" --app "$APP_INSIGHTS_NAME" > /dev/null 2>&1; then
        logger "INFO" "Application Insights instance '$APP_INSIGHTS_NAME' already exists."
    else
        # Check if we need to create the Application Insights instance
        if [[ "$ENABLE_APP_INSIGHTS" == "true" ]]; then
            logger "INFO" "Application Insights instance '$APP_INSIGHTS_NAME' does not exist. Creating it..."
            az monitor app-insights component create --app "$APP_INSIGHTS_NAME" --location "$LOCATION" --resource-group "$RESOURCE_GROUP" --kind web
            if [[ $? -eq 0 ]]; then
                logger "INFO" "Application Insights instance '$APP_INSIGHTS_NAME' created successfully."
            else
                logger "ERROR" "Failed to create Application Insights instance '$APP_INSIGHTS_NAME'."
                exit 1
            fi
        else
            logger "INFO" "Application Insights instance '$APP_INSIGHTS_NAME' does not exist and 'ENABLE_APP_INSIGHTS' flag is not set to true. Skipping creation."
        fi
    fi
}

# Function to configure Application Insights for a Web App
configure_app_insights_webapp() {
    local resource_group=$RESOURCE_GROUP
    local webapp_name=$WEBAPP_NAME
    local app_insights_name=$APP_INSIGHTS_NAME

    logger "INFO" "Configuring Application Insights for Web App: $webapp_name in Resource Group: $resource_group..."

    # Get the Application Insights instrumentation key
    local instrumentation_key=$(az monitor app-insights component show --resource-group "$resource_group" --name "$app_insights_name" --query instrumentationKey --output tsv)
    if [ $? -ne 0 ] || [ -z "$instrumentation_key" ]; then
        logger "ERROR" "Failed to retrieve instrumentation key for Application Insights: $app_insights_name"
        return 1
    fi

    # Configure Application Insights for the Web App
    az webapp config appsettings set --resource-group "$resource_group" --name "$webapp_name" --settings "APPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=$instrumentation_key"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to configure Application Insights for Web App: $webapp_name"
        return 1
    fi

    logger "INFO" "Application Insights configured successfully for Web App: $webapp_name."
    return 0
}

# Function to configure Application Insights for a Spring App
configure_app_insights_spring_app() {
    local resource_group=$RESOURCE_GROUP
    local springapp_name=$SPRING_APP_NAME
    local app_insights_name=$APP_INSIGHTS_NAME

    logger "INFO" "Configuring Application Insights for Spring App: $springapp_name in Resource Group: $resource_group..."

    # Get the Application Insights instrumentation key
    local instrumentation_key=$(az monitor app-insights component show --resource-group "$resource_group" --name "$app_insights_name" --query instrumentationKey --output tsv)
    if [ $? -ne 0 ] || [ -z "$instrumentation_key" ]; then
        logger "ERROR" "Failed to retrieve instrumentation key for Application Insights: $app_insights_name"
        return 1
    fi

    # Configure Application Insights for the Spring App
    az spring app update --name "$springapp_name" --resource-group "$resource_group" --set properties["applicationInsights.instrumentationKey"]="$instrumentation_key"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to configure Application Insights for Spring App: $springapp_name"
        return 1
    fi

    logger "INFO" "Application Insights configured successfully for Spring App: $springapp_name."
    return 0
}

# Enable Azure Monitor for Spring Apps
enable_spring_apps_monitoring() {
    local spring_apps_service_name=$SPRING_APPS_SERVICE_NAME
    local spring_apps_service_resource_id=$SPRING_APPS_SERVICE_RESOURCE_ID
    local log_analytics_workspace_id=$LOG_ANALYTICS_WORKSPACE_ID

    logger "INFO" "Enabling monitoring for Azure Spring Apps: $spring_apps_service_name..."

    az monitor diagnostic-settings create --name "SpringAppsDiagnostics" --resource "$spring_apps_service_resource_id" --workspace "$log_analytics_workspace_id" \
        --logs '[{"category": "ApplicationConsole", "enabled": true},{"category": "SystemLogs", "enabled": true}]' \
        --metrics '[{"category": "AllMetrics", "enabled": true}]'

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to enable monitoring for Azure Spring Apps: $spring_apps_service_name"
        return 1
    fi

    logger "INFO" "Monitoring enabled successfully for Azure Spring Apps: $spring_apps_service_name."
    return 0
}

# Function to Enable Monitoring for Node.js Web App
enable_nodejs_webapp_monitoring() {
    local resource_group=$RESOURCE_GROUP
    local webapp_name=$WEBAPP_NAME
    local log_analytics_workspace_id=$LOG_ANALYTICS_WORKSPACE_ID

    logger "INFO" "Enabling monitoring for Node.js Web App: $webapp_name in Resource Group: $resource_group..."

    # Enable diagnostics settings to send logs and metrics to Log Analytics Workspace
    az monitor diagnostic-settings create \
        --resource-group "$resource_group" \
        --resource-id "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$resource_group/providers/Microsoft.Web/sites/$webapp_name" \
        --workspace "$log_analytics_workspace_id" \
        --logs '[{"category": "ApplicationLogs", "enabled": true},{"category": "HttpLogs", "enabled": true},{"category": "ConsoleLogs", "enabled": true}]' \
        --metrics '[{"category": "AllMetrics", "enabled": true}]'

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to enable monitoring for Node.js Web App: $webapp_name"
        return 1
    fi

    logger "INFO" "Monitoring enabled successfully for Node.js Web App: $webapp_name."
    return 0
}

link_app_insights_to_log_analytics() {
    local resource_group=$RESOURCE_GROUP
    local app_insights_name=$APP_INSIGHTS_NAME
    local log_analytics_workspace_id=$LOG_ANALYTICS_WORKSPACE_ID
    local log_analytics_workspace_name=$LOG_ANALYTICS_WORKSPACE_NAME

    logger "INFO" "Linking Application Insights: $app_insights_name to Log Analytics Workspace: $log_analytics_workspace_name..."

    az monitor app-insights component connect-log-analytics --app "$app_insights_name" --resource-group "$resource_group" --workspace "$log_analytics_workspace_id"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to link Application Insights: $app_insights_name to Log Analytics Workspace: $log_analytics_workspace_name"
        return 1
    fi

    logger "INFO" "Application Insights: $app_insights_name linked successfully to Log Analytics Workspace: $log_analytics_workspace_name."
    return 0
}

# Function to create an action group
create_action_group() {
    local resource_group=$RESOURCE_GROUP
    local action_group_name=$ACTION_GROUP_NAME
    local email_receiver=$EMAIL_RECEIVER
    local sms_receiver=$SMS_RECEIVER_PHONE_NUMBER
    local sms_country_code=$SMS_RECEIVER_COUNTRY_CODE

    logger "INFO" "Creating action group: $action_group_name in Resource Group: $resource_group..."

    # Create Action Group
    az monitor action-group create --name "$action_group_name" \
        --resource-group "$resource_group" \
        --short-name "$action_group_name" \
        --email-receiver name="EmailReceiver" email="$email_receiver" \
        --sms-receiver name="SMSReceiver" country-code="$sms_country_code" phone-number="$sms_receiver"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to create action group: $action_group_name"
        return 1
    fi

    logger "INFO" "Action group $action_group_name created successfully."
    return 0
}

# Configure Alerts for Application Insights
configure_app_insights_alert() {
    local resource_group=$RESOURCE_GROUP
    local app_insights_name=$APP_INSIGHTS_NAME
    local subscription_id=$SUBSCRIPTION_ID

    logger "INFO" "Configuring alerts for Application Insights: $app_insights_name..."

    az monitor metrics alert create --name "AppInsightsAlert" --resource-group "$resource_group" --scopes "/subscriptions/$subscription_id/resourceGroups/$resource_group/providers/microsoft.insights/components/$app_insights_name" \
        --condition "total requests > 100 where resultCode != 200" --window-size "5m" --evaluation-frequency "1m"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to configure alerts for Application Insights: $app_insights_name"
        return 1
    fi

    logger "INFO" "Alerts configured successfully for Application Insights: $app_insights_name."
    return 0
}


# Function to create a CPU alert rule for a Web App
create_cpu_alert_webapp() {
    local resource_group=$RESOURCE_GROUP
    local webapp_name=$WEBAPP_NAME
    local alert_name=$WEBAPP_CPU_ALERT_NAME
    local action_group=$ACTION_GROUP_NAME
    local cpu_threshold=$WEBAPP_CPU_THRESHOLD

    logger "INFO" "Creating CPU alert rule for Web App: $webapp_name in Resource Group: $resource_group..."

    # Get the resource ID of the Web App
    local resource_id=$(az webapp show --resource-group "$resource_group" --name "$webapp_name" --query id --output tsv)
    if [ $? -ne 0 ] || [ -z "$resource_id" ]; then
        logger "ERROR" "Failed to retrieve resource ID for Web App: $webapp_name"
        return 1
    fi

    # Create CPU alert rule
    az monitor metrics alert create --name "${alert_name}-CPU" \
        --resource-group "$resource_group" --scopes "$resource_id" \
        --condition "avg Percentage CPU > $cpu_threshold" \
        --description "High CPU Alert for Web App: $webapp_name" \
        --action-group "$action_group"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to create CPU alert rule for Web App: $webapp_name"
        return 1
    fi

    logger "INFO" "CPU alert rule created successfully for Web App: $webapp_name."
    return 0
}

# Function to create a Memory alert rule for a Web App
create_memory_alert_webapp() {
    local resource_group=$RESOURCE_GROUP
    local webapp_name=$WEBAPP_NAME
    local alert_name=$WEBAPP_MEMORY_ALERT_NAME
    local action_group=$ACTION_GROUP_NAME
    local memory_threshold=$WEBAPP_MEMORY_THRESHOLD

    logger "INFO" "Creating Memory alert rule for Web App: $webapp_name in Resource Group: $resource_group..."

    # Get the resource ID of the Web App
    local resource_id=$(az webapp show --resource-group "$resource_group" --name "$webapp_name" --query id --output tsv)
    if [ $? -ne 0 ] || [ -z "$resource_id" ]; then
        logger "ERROR" "Failed to retrieve resource ID for Web App: $webapp_name"
        return 1
    fi

    # Create Memory alert rule
    az monitor metrics alert create --name "${alert_name}-Memory" \
        --resource-group "$resource_group" --scopes "$resource_id" \
        --condition "avg Memory Working Set > $memory_threshold" \
        --description "High Memory Alert for Web App: $webapp_name" \
        --action-group "$action_group"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to create Memory alert rule for Web App: $webapp_name"
        return 1
    fi

    logger "INFO" "Memory alert rule created successfully for Web App: $webapp_name."
    return 0
}

# Function to create a CPU alert rule for a Spring App
create_cpu_alert_spring_app() {
    local resource_group=$RESOURCE_GROUP
    local springapp_name=$SPRING_APP_NAME
    local alert_name=$SPRING_APP_CPU_ALERT_NAME
    local action_group=$ACTION_GROUP_NAME
    local cpu_threshold=$SPRING_APP_CPU_THRESHOLD

    logger "INFO" "Creating CPU alert rule for Spring App: $springapp_name in Resource Group: $resource_group..."

    # Get the resource ID of the Spring App
    local resource_id=$(az spring-cloud app show --resource-group "$resource_group" --service "$springapp_name" --name "$springapp_name" --query id --output tsv)
    if [ $? -ne 0 ] || [ -z "$resource_id" ]; then
        logger "ERROR" "Failed to retrieve resource ID for Spring App: $springapp_name"
        return 1
    fi

    # Create CPU alert rule
    az monitor metrics alert create --name "${alert_name}-CPU" \
        --resource-group "$resource_group" --scopes "$resource_id" \
        --condition "avg CpuUsage > $cpu_threshold" \
        --description "High CPU Alert for Spring App: $springapp_name" \
        --action-group "$action_group"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to create CPU alert rule for Spring App: $springapp_name"
        return 1
    fi

    logger "INFO" "CPU alert rule created successfully for Spring App: $springapp_name."
    return 0
}

# Function to create a Memory alert rule for a Spring App
create_memory_alert_spring_app() {
    local resource_group=$RESOURCE_GROUP
    local springapp_name=$SPRING_APP_NAME
    local alert_name=$SPRING_APP_MEMORY_ALERT_NAME
    local action_group=$ACTION_GROUP_NAME
    local memory_threshold=$SPRING_APP_MEMORY_THRESHOLD

    logger "INFO" "Creating Memory alert rule for Spring App: $springapp_name in Resource Group: $resource_group..."

    # Get the resource ID of the Spring App
    local resource_id=$(az spring-cloud app show --resource-group "$resource_group" --service "$springapp_name" --name "$springapp_name" --query id --output tsv)
    if [ $? -ne 0 ] || [ -z "$resource_id" ]; then
        logger "ERROR" "Failed to retrieve resource ID for Spring App: $springapp_name"
        return 1
    fi

    # Create Memory alert rule
    az monitor metrics alert create --name "${alert_name}-Memory" \
        --resource-group "$resource_group" --scopes "$resource_id" \
        --condition "avg MemoryUsage > $memory_threshold" \
        --description "High Memory Alert for Spring App: $springapp_name" \
        --action-group "$action_group"

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to create Memory alert rule for Spring App: $springapp_name"
        return 1
    fi

    logger "INFO" "Memory alert rule created successfully for Spring App: $springapp_name."
    return 0
}

