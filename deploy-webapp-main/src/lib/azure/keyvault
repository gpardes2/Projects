#! /bin/bash

# Set error handling to exit the script immediately if a command fails
set -e

# Function to check and create Key Vault
check_and_create_key_vault() {
    logger "INFO" "Checking if Key Vault '$KEY_VAULT_NAME' exists..."

    if ! az keyvault show --name $KEY_VAULT_NAME > /dev/null 2>&1; then

        logger "INFO" "Key Vault '$KEY_VAULT_NAME' does not exist. Creating..."
        az keyvault create --name $KEY_VAULT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION --sku standard
        if [ $? -ne 0 ]; then
            logger "ERROR" "Failed to create key vault $KEY_VAULT_NAME"
            exit 1
        fi
    else
        logger "DEBUG" "Key Vault '$KEY_VAULT_NAME' already exists."
    fi
}

# Function to fetch secrets from Azure Key Vault and export key=value pairs as environment variables
load_secrets_from_keyvault() {
    local keyvault_name=$KEYVAULT_NAME

    if [ -z "$keyvault_name" ]; then
        logger "ERROR" "Key Vault name is required"
        return 1
    fi

    logger "INFO" "Fetching secrets from Key Vault: $keyvault_name"

    # List all secret names in the Key Vault
    secret_names=$(az keyvault secret list --vault-name "$keyvault_name" --query "[].name" -o tsv)

    if [ -z "$secret_names" ]; then
        logger "INFO" "No secrets found in Key Vault: $keyvault_name"
        return 0
    fi

    # Iterate over each secret
    for secret_name in $secret_names; do
        # Fetch the secret value
        secret_value=$(az keyvault secret show --vault-name "$keyvault_name" --name "$secret_name" --query "value" -o tsv)

        if [ $? -ne 0 ]; then
            logger "ERROR" "Failed to retrieve secret: $secret_name"
            return 1
        fi

        # Split the secret_value into individual key=value pairs and export each as an environment variable
        while IFS= read -r line; do
            # Ignore empty lines and lines starting with '#'
            if [[ -n "$line" && ! "$line" =~ ^# ]]; then
                key=$(echo "$line" | cut -d '=' -f 1)
                value=$(echo "$line" | cut -d '=' -f 2-)

                # Export the key=value as an environment variable
                export "$key=$value"
                logger "INFO" "Loaded environment variable: $key"
            fi
        done <<< "$secret_value"
    done

  logger "INFO" "All secrets have been loaded successfully"
}

# Function to upload DB2 certificates to Key Vault
upload_db2_certs_to_key_vault() {
    logger "INFO" "Starting upload of DB2 certificates to Key Vault..."

    # Upload Client Certificate
    logger "INFO" "Uploading DB2 client certificate to Key Vault..."
    az keyvault certificate import --vault-name "$KEYVAULT_NAME" --name "$DB2_CLIENT_CERT_NAME" --file "$DB2_CLIENT_CERT_PATH"
    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to upload DB2 client certificate to Key Vault"
        exit 1
    fi
    logger "INFO" "Successfully uploaded DB2 client certificate to Key Vault."

    # Upload Client Key
    logger "INFO" "Uploading DB2 client key to Key Vault..."
    az keyvault secret set --vault-name "$KEYVAULT_NAME" --name "$DB2_CLIENT_KEY_NAME" --file "$DB2_CLIENT_KEY_PATH"
    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to upload DB2 client key to Key Vault"
        exit 1
    fi
    logger "INFO" "Successfully uploaded DB2 client key to Key Vault."

    # Upload CA Certificate
    logger "INFO" "Uploading DB2 CA certificate to Key Vault..."
    az keyvault certificate import --vault-name "$KEYVAULT_NAME" --name "$DB2_CA_CERT_NAME" --file "$DB2_CA_CERT_PATH"
    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to upload DB2 CA certificate to Key Vault"
        exit 1
    fi
    logger "INFO" "Successfully uploaded DB2 CA certificate to Key Vault."

    logger "INFO" "Deleting DB2 CA certificate from local path..."

    delete_file "$DB2_CLIENT_CERT_PATH"
    delete_file "$DB2_CLIENT_KEY_PATH"
    delete_file "$DB2_CA_CERT_PATH"

    logger "INFO" "Successfully deleted DB2 CA certificate from local path..."

    logger "INFO" "All DB2 certificates successfully uploaded to Key Vault."
}

# Function to store Oracle credentials in Key Vault as a secret
store_oracle_creds_in_key_vault() {
    logger "INFO" "Storing Oracle credentials in Key Vault as a secret..."

    # Prepare the secret value as key=value pairs separated by newlines
    oracle_secret_value="ORACLE_USERNAME=$ORACLE_USERNAME\nORACLE_PASSWORD=$ORACLE_PASSWORD"

    # Store the combined secret in Key Vault
    az keyvault secret set --vault-name "$KEYVAULT_NAME" --name "$ORACLE_SECRET_NAME" --value "$oracle_secret_value"
    
    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to store Oracle credentials in Key Vault $KEYVAULT_NAME"
        exit 1
    fi

    logger "INFO" "Oracle credentials successfully stored in Key Vault $KEYVAULT_NAME"
}

# Function to fetch a secret from Azure Key Vault
fetch_secret_from_keyvault() {
    local key_vault_name=$1
    local secret_name=$2

    logger "INFO" "Fetching secret $secret_name from Key Vault $key_vault_name..."
    local secret_value
    secret_value=$(az keyvault secret show --vault-name "$key_vault_name" --name "$secret_name" --query value -o tsv)

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to fetch secret $secret_name from Key Vault $key_vault_name"
        exit 1
    fi

    echo "$secret_value"
}

# Function to fetch a certificate from Key Vault
fetch_certificate_from_keyvault() {
    local key_vault_name=$1
    local cert_name=$2

    # Fetch the certificate from Key Vault and decode it from base64
    local certificate=$(az keyvault certificate show --vault-name "$key_vault_name" --name "$cert_name" --query cer -o tsv | base64 -d)

    if [ -z "$certificate" ]; then
        logger "ERROR" "Failed to fetch certificate: $cert_name from Key Vault: $key_vault_name"
        return 1
    fi

    echo "$certificate"
    return 0
}

store_storage_acc_secrets_in_keyvault() {
    local key_vault_name=$1
    local storage_account_name=$2
    local storage_account_key=$3

    # Store the account name and key in Key Vault
  logger "INFO" "Storing storage account credentials in Key Vault: $key_vault_name"
    az keyvault secret set --vault-name $key_vault_name \
                           --name "${storage_account_name}-account-name" \
                           --value $storage_account_name

    az keyvault secret set --vault-name $key_vault_name \
                           --name "${storage_account_name}-account-key" \
                           --value $storage_account_key

    if [ $? -ne 0 ]; then
        logger "ERROR" "Failed to store storage account secrets in Key Vault" >&2
        exit 1
    fi

    logger "INFO" "Storage account credentials stored in Key Vault successfully."
}

